{{template "base" . }}
{{define "title"}}Virtual Terminal{{end}}
{{define "content"}}
<h2 class="mt-3 text-center">Virtual Terminal (InstructorDev)(Sunday, 2022-01-09)</h2>
<hr/>
<div class="alert alert-danger text-center d-none" id="card-messages"></div>
<form   action="/payment-succeeded" 
        method="POST" 
        name="charge_form" 
        id="charge_form" 
        class="d-block needs-validation charge-form"
        autocomplete="off"
        novalidate="">

    <div class="mb-3">
        <label for="amount" class="form-label">Amount</label>
        <input type="text" class="form-control" id="amount" name="amount" required="" autocomplete="amount-new">
    </div>
    <div class="mb-3">
        <label for="cardholder-name" class="form-label">Cardholder Name</label>
        <input type="text" class="form-control" id="cardholder-name" name="cardholder_name" required="" autocomplete="cardholder-name-new">
    </div>
    <div class="mb-3">
        <label for="cardholder-email" class="form-label">Cardholder Email</label>
        <input type="text" class="form-control" id="cardholder-email" name="email" required="" autocomplete="cardholder-email-new">
    </div>
    <div class="mb-3">
        <label for="card-element" class="form-label">Credit Card</label>
        <div id="card-element" class="form-control"></div>
        <div class="alert-danger text-center" id="card-errors" role="alert"></div>
        <div class="alert-success text-center" id="card-success" role="alert"></div>
    </div>
    <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Charge Card</a>
    <div id="processing-payment" class="text-center d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    <input type="hidden" name="payment_intent" id="payment_intent">
    <input type="hidden" name="payment_method" id="payment_method">
    <input type="hidden" name="payment_amount" id="payment_amount">
    <input type="hidden" name="payment_currency" id="payment_currency">
</form>
{{end}}
{{define "js"}} 
    <script src="https://js.stripe.com/v3"></script>
    <script>
        let card;
        let stripe = Stripe('pk_test_51KEmG3JxV5c4eSlbjMSzW69ht79i17P8luMgFxl8fyX3uFUKqeckTqxJTTLtgpktBGBCg3JYEnDzS0YisvMj1REX00J7vdvjyB');
        const cardMessages = document.getElementById("card-messages");
        const payButton = document.getElementById("pay-button");
        const processing = document.getElementById("processing-payment");
        
        function hidePayButton() {
            payButton.classList.add("d-none");
            processing.classList.remove("d-none");
        }

        function showPayButtons() {
            payButton.classList.remove("d-none");
            processing.classList.add("d-none");
        }

        function showCardError(msg) {
            cardMessages.classList.add("alert-danger");
            cardMessages.classList.remove("alert-success");
            cardMessages.classList.remove("d-none");
            cardMessages.innerText = msg;
        }

        function showCardSuccess(msg) {
            cardMessages.classList.remove("alert-danger");
            cardMessages.classList.add("alert-success");
            cardMessages.classList.remove("d-none");
            cardMessages.innerText = "Credit card transaction was successful.";
        }


        function val() {
            console.log("Charge Card button clicked");
            let form = document.getElementById("charge_form");

            if (form.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                form.classList.add("was-validated");
                return;
            }

            form.classList.add("was-validated");
            hidePayButton();
            let amountToCharge = String(parseFloat(document.getElementById("amount").value) * 100)
            console.log("amountToCharge:", amountToCharge);

            let payload = {
                amount: amountToCharge,
                currency: 'usd',
            }

            const requestOptions = {
                method: 'post',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            }

            const url = "http://localhost:4001/api/payment-intent";
            fetch(url, requestOptions)
            .then (response => response.text())
            .then(response => {
                let data;
                try {
                    data = JSON.parse(response);
                    console.log("responseData:", data);
                    stripe.confirmCardPayment(data.client_secret, {
                        payment_method: {
                            card: card,
                            billing_details: {
                                name: document.getElementById("cardholder-name").value,
                            }
                        }
                    }).then(function(result) {
                        if (result.error) {
                            // card processesing related error
                            showCardError(result.error.message);
                            showPayButtons();
                        } else if (result.paymentIntent) {
                            if (result.paymentIntent.status === "succeeded") {
                                // card has been successfully charged
                                document.getElementById("payment_method").value = result.paymentIntent.payment_method_types[0];
                                document.getElementById("payment_intent").value = result.paymentIntent.id;
                                document.getElementById("payment_amount").value = result.paymentIntent.amount;
                                document.getElementById("payment_currency").value = result.paymentIntent.currency;
                                processing.classList.add("d-none");
                                showCardSuccess();
                            }
                        }
                    })
                } catch (err) {
                    console.log("error:", err);
                    showCardError(err);
                   // showCardError("Invalid response from payment gateway.");
                    showPayButtons();
                }
            })
        }

        (function() {
            // Create Stripe and elements
            const elements = stripe.elements();
            const style = {
                base: {
                    fontSize: '16px',
                    lineHeight: '24px'
                }
            };

            // Create card entry
            card = elements.create('card', {
                style: style,
                hidePostalCode: false,
            });           
            card.mount("#card-element");

            // Check for credit card input errors
            card.addEventListener('change', function(event) {
                var displayError = document.getElementById("card-errors");
                if (event.error) {
                    displayError.classList.remove('d-none');
                    displayError.textContent = event.error.message;
                } else {
                    displayError.classList.add('d-none');
                    displayError.textContent = '';
                }
            });
        })();
    </script>
{{end}}